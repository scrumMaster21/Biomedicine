import re
import collections

tf1 = 'BHTGTGGTYW'
p1 = r'([^A][^G](TGTGGT)[CT][AT])'

tf2 = 'WGACAGB'
p2 = r'([AT](GACAG)[^A])'

tf3 = 'BTGGGARD'
p3 = r'([^A](TGGGA)[AG][^C])'

#function to read the sequence
def readDna(file):
	sequence = ''
	with open(file, 'r') as dna:
		for line in dna:
			if not line[0] == '>':
				sequence += line.rstrip()
	dna.close()
	return sequence
gen = readDna('Sequence.txt')
print(gen, '\n')

#function to find matches
def findTranscriptionFactors(s, file):
	for i in s:
			found1 = re.finditer(p1, s)
			with open("Matches.txt", 'a') as matches:
				print(f"Match found at position: {found1.start()}\n")
				matches.write(f"Match found at position: {found1.start()}\n")
findTranscriptionFactors(gen, 'Matches.txt')



#function to complement the given sequence
def complementGenome(s, file):
	complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
	emoneg = ''
	with open(file, 'a') as changes_file:
		for i in s:
			emoneg = complement[i]
			changes_file.write(emoneg)
	changes_file.close()
complementGenome(gen, 'Changes.txt')



#function to create the sequence after transcription to rna
def turnToRna(s, file):
	transcr = {'T': 'U', 'A': 'A', 'C': 'C', 'G': 'G'}
	rna = ''
	with open(file, 'a') as transcr_file:
		for i in s:
			rna = rna + transcr[i]
			transcr_file.write(rna)
	transcr_file.close()
turnToRna(gen, 'Rna.txt')


#function to count how many times each base appears in given sequence
#and to calculate percentage of CG compared to other bases
def countBases(s, file):
	seq_length = len(s)
	print('Total number of bases:', seq_length, '\n')
	char_count = collections.Counter(s)
	print('Number of occurences of each base in sequence:', char_count, '\n')
	gc = 0
	percent_gc = 0
	for c in s:
		for i in range(len(s)):
			if s[i] == 'C' or s[i] == 'G':
				gc += 1
	if gc > 0:
		percent_gc = (gc / seq_length) * 100	
		print('Percentage of "CG" compared to other bases in given sequence is:', percent_gc, '\n')
	with open(file, 'a') as count_file:
		count_file.write(str(seq_length))
		count_file.write('\n')
		count_file.write(str(char_count))
		count_file.write('\n')
		count_file.write(str(percent_gc))
	count_file.close()
countBases(gen, "Count.txt")

